#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var assert = require('assert');
var prompt = require('prompt');
var program = require('commander');
var Scarlet = require('scarlet');
var scarletInit = require('../lib/scarlet-init');
var init = require('init-package-json');
var version = require('../package.json').version;

var scarlet = new Scarlet('scarlet-log4js');
var scarletLog4js = scarlet.plugins.log4js;
var logger = scarletLog4js.getLogger("scarlet-init");

program
	.version(version)
	.usage('<indexFileToConvert>')
	.parse(process.argv);

prompt.message ='';
prompt.start();

var property = {
  name: 'yesno',
  message: 'Are you sure you want to write to the current directory?',
  validator: /y[es]*|n[o]?/,
  warning: 'Must respond yes or no',
  default: 'yes'
};

prompt.get(property, function(err, result) {
	if(result.yesno.toLowerCase() !== 'y' && result.yesno.toLowerCase() !== 'yes' && result.yesno.toLowerCase() !== '')
		return;

	var template = "default";

	//logger.info("About to start creating scaffolding...");

	// a path to a promzard module.  In the event that this file is
	// not found, one will be provided for you.
	var initFile = __dirname+'/config/'+template+'.js';
	
	// the dir where we're doin stuff.
	var dir = process.cwd();

	// extra stuff that gets put into the PromZard module's context.
	// In npm, this is the resolved config object.  Exposed as 'config'
	// Optional.
	var configData = {};

	// Any existing stuff from the package.json file is also exposed in the
	// PromZard module as the `package` object.  There will also be free
	// vars for:
	// * `filename` path to the package.json file
	// * `basename` the tip of the package dir
	// * `dirname` the parent of the package dir

	init(dir, initFile, configData, function (er, data) {
		if(er){
			logger.error("Error in creating package:"+err);
			return;
		}

		if(data)
			scarletInit.writeTemplate(data,template);
	});
});
