#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var assert = require('assert');
var prompt = require('prompt');
var Scarlet = require('scarlet');
var program = require('commander');
var init = require('init-package-json');
var scarletInit = require('../lib/scarlet-init');
var version = require('../package.json').version;

var scarlet = new Scarlet('scarlet-log4js');
var scarletLog4js = scarlet.plugins.log4js;
var logger = scarletLog4js.getLogger("scarlet-init");

program
	.version(version)
	.usage('<indexFileToConvert>')
	.option('-t, --template [default|lite]', 'Template to use')
	.parse(process.argv);

prompt.message ='';
prompt.start();

var property = {
  name: 'yesno',
  message: 'Are you sure you want to write to the current directory?',
  validator: /y[es]*|n[o]?/,
  warning: 'Must respond yes or no',
  default: 'yes'
};

prompt.get(property, function(err, result) {
	if(result.yesno.toLowerCase() !== 'y' && result.yesno.toLowerCase() !== 'yes' && result.yesno.toLowerCase() !== '')
		return;

	var template = "default";
	if(program.template){
		template = program.template;
	}

	enableVerboseOutput();
	// a path to a promzard module.  In the event that this file is
	// not found, one will be provided for you.
	var initFile = __dirname+'/config/'+template+'.js';
	
	// the dir where we're doin stuff.
	var dir = process.cwd();

	// extra stuff that gets put into the PromZard module's context.
	// In npm, this is the resolved config object.  Exposed as 'config'
	// Optional.
	var configData = {};

	// Any existing stuff from the package.json file is also exposed in the
	// PromZard module as the `package` object.  There will also be free
	// vars for:
	// * `filename` path to the package.json file
	// * `basename` the tip of the package dir
	// * `dirname` the parent of the package dir
	getLatestDependencies(function(dependentVersions){

		configData.scarletVersion = dependentVersions.scarlet;

		init(dir, initFile, configData, function (er, data) {

			if(er){
				logger.error("Error in creating package:"+err);
				return;
			}

			if(data)
				scarletInit.writeTemplate(data,template);
		});
	});

});

var getLatestDependencies =  function(onDependencyVersion){
    var npmconf = require('npmconf');
    var RegClient = require('npm-registry-client');
    npmconf.defaults.loglevel = "silent";

    var client = new RegClient(npmconf.defaults);
    client.log.level = "silent";

    client.get("scarlet", "latest", 1000, function (er, data, raw, res) {
      // error is an error if there was a problem.
      // data is the parsed data object
      // raw is the json string
      // res is the response from couch
      onDependencyVersion({scarlet:  "~"+data["dist-tags"].latest});
    });

};

var enableVerboseOutput = function(){
	logger.info("About to start creating scaffolding...");

	scarlet.intercept(scarletInit,'writeTemplate')
			.on('before',function(invocation){
				logger.info("Writing "+invocation.args[1]+" template to :"+process.cwd());
			}).on('after',function(invocation){
				logger.info("Completed writing "+invocation.args[1]+" template to :"+process.cwd());
			}).on('error', function(error){
				logger.error("Error in writing template:"+error.message);
			});

	getLatestDependencies = scarlet.intercept(getLatestDependencies).on('before',function(invocation){
		logger.info("Getting latest scarlet version");
	}).on('error', function(invocation){
		logger.error("Error in getting latest scarlet version from npm")
	}).resolve();
}